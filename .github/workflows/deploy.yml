name: Deploy to AWS EC2 with Terraform

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

          # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Step 3: Install project dependencies
      - name: Install dependencies
        run: npm install 

      # Step 2: Configure AWS credentials for Terraform
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1 # Replace with your region

      # Step 3: Set up Terraform using official HashiCorp action
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      # Step 4: Initialize and validate Terraform
      - name: Initialize Terraform
        working-directory: ./terraform
        run: terraform init

      - name: Validate Terraform configuration
        working-directory: ./terraform
        run: terraform validate

      - name: Apply Terraform
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terraform apply -auto-approve \
            -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -var "aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -var "key_pair=${{ secrets.KEY_PAIR }}" \
            -var "ami_id=${{ secrets.AMI_ID }}"


      # Step 6: Get the public IP of the EC2 instance
      - name: Get EC2 Instance Public IP
        working-directory: ./terraform
        id: get_ip
        run: |
          INSTANCE_PUBLIC_IP=$(terraform output -raw instance_public_ip)
          echo "Instance Public IP: $INSTANCE_PUBLIC_IP"
          echo "INSTANCE_PUBLIC_IP=$INSTANCE_PUBLIC_IP" >> $GITHUB_ENV

      # Step 7: Wait for EC2 instance to be ready
      - name: Wait for EC2 Instance
        run: |
          echo "Waiting for EC2 instance to be ready..."
          sleep 60

      # Step 8: SSH into EC2 instance and deploy code
      - name: Deploy to EC2 instance via SSH
        env:
          EC2_PUBLIC_IP: ${{ env.INSTANCE_PUBLIC_IP }}
        run: |
          echo "Deploying code to EC2 instance..."
          ssh -o "StrictHostKeyChecking=no" -i ~/.ssh/id_rsa ec2-user@${{ env.EC2_PUBLIC_IP }} << 'EOF'
            git clone https://github.com/yourusername/your-repo.git
            cd your-repo
            npm install
            npm start
          EOF

      # Optional: Terminate EC2 instance after deployment (to save cost)
      - name: Terminate EC2 instance
        working-directory: ./terraform
        run: |
          terraform destroy -auto-approve \
            -var "key_pair=${{ secrets.KEY_PAIR }}" \
            -var "ami_id=${{ secrets.AMI_ID }}"
